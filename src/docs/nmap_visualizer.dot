digraph "nmap_visualizer" {

splines  = ortho;
fontname = "Inconsolata";

node [colorscheme = ylgnbu4];
edge [colorscheme = dark28, dir = both];

ABC                                                           [shape = record, label = "{ ABC |  }"];
Base                                                          [shape = record, label = "{ Base |  }"];
Exception                                                     [shape = record, label = "{ Exception |  }"];
Timer                                                         [shape = record, label = "{ Timer |  }"];
"database.db_connection.DBConnection"                         [shape = record, label = "{ database.db_connection.DBConnection |  engine : \l  Session : \l| __init__(self, db_path: str, create_tabels: bool=True) : \l  create_session(self) : \l }"];
"database.models.BaseModel"                                   [shape = record, label = "{ database.models.BaseModel |  logger : \l| __eq__(self, other) : \l  to_dict(self) : \l }"];
"database.models.IP"                                          [shape = record, label = "{ database.models.IP |  __tablename__ : \l  id : \l  mac : \l  _mac : \l  ip : \l  domain_name : \l  _host_ip : \l| to_dict(self) : \l }"];
"database.models.L3Link"                                      [shape = record, label = "{ database.models.L3Link |  __tablename__ : \l  id : \l  child_ip : \l  _child_ip : \l  parent_ip : \l  _parent_ip : \l| to_dict(self) : \l }"];
"database.models.MAC"                                         [shape = record, label = "{ database.models.MAC |  __tablename__ : \l  id : \l  mac : \l  object : \l  _obj : \l  _ip : \l| to_dict(self) : \l }"];
"database.models.Object"                                      [shape = record, label = "{ database.models.Object |  __tablename__ : \l  id : \l  object_type : \l  os : \l  status : \l  _mac : \l }"];
"database.models.Port"                                        [shape = record, label = "{ database.models.Port |  __tablename__ : \l  id : \l  ip : \l  _ip : \l  _screenshot : \l  port : \l  service_name : \l  state : \l  product : \l  extra_info : \l  version : \l  os_type : \l  cpe : \l| to_dict(self) : \l }"];
"database.models.Screenshot"                                  [shape = record, label = "{ database.models.Screenshot |  __tablename__ : \l  id : \l  port : \l  _port : \l  screenshot_path : \l  task : \l  _task : \l  domain : \l| to_dict(self) : \l }"];
"database.models.Task"                                        [shape = record, label = "{ database.models.Task |  __tablename__ : \l  id : \l  status : \l  created : \l  started : \l  finished : \l  params : \l  comment : \l }"];
"database.queries.Queries"                                    [shape = record, label = "{ database.queries.Queries |  task : \l  port : \l  ip : \l  screenshot : \l  l3link : \l  db : \l  mac : \l  object : \l| __init__(self, db_path: str) : \l }"];
"database.queries_files.base_queries.BaseQueries"             [shape = record, label = "{ database.queries_files.base_queries.BaseQueries |  logger : \l  session_maker : \l  model : \l| __init__(self, session_maker: Session) : \l  session_provide(func) : \l  write(self, session: Session, ret: str=None, **kwargs) : \l  write_many(self, session: Session, data: list) : \l  create(self, session: Session, *args, **kwargs) : \l  get_or_create(self, session, **kwargs) : \l  get_all(self, session: Session, result_format: str='dict') : \l  delete_by_id(self, session: Session, id: int) : \l  get_headers(self, *args, **kwargs) : \l  update(self, session: Session, expression: tuple, to_update: dict) : \l }"];
"database.queries_files.base_queries.Mock"                    [shape = record, label = "{ database.queries_files.base_queries.Mock |  __getattribute__(self, item) : \l }"];
"database.queries_files.ip_queries.IPQueries"                 [shape = record, label = "{ database.queries_files.ip_queries.IPQueries |  mac : \l  model : \l| __init__(self, mac: MACQueries, session_maker: Session) : \l  create(self, session: Session, ip: str, mac: str=None, domain_name: str=None) : \l }"];
"database.queries_files.l3link_queries.L3LinkQueries"         [shape = record, label = "{ database.queries_files.l3link_queries.L3LinkQueries |  ip : \l  model : \l| __init__(self, ip: IPQueries, session_maker: Session) : \l  create(self, session: Session, child_ip: str, parent_ip: str, child_mac: str=None, parent_mac: str=None,
                         child_name: str=None, parent_name: str=None, start_ip: str=None) : \l  get_nodes_and_edges(self, session: Session) : \l }"];
"database.queries_files.mac_queries.MACQueries"               [shape = record, label = "{ database.queries_files.mac_queries.MACQueries |  object : \l  model : \l| __init__(self, objects: ObjectQueries, session_maker: Session) : \l  create(self, session: Session, mac: str, **kwargs) : \l }"];
"database.queries_files.object_queries.ObjectQueries"         [shape = record, label = "{ database.queries_files.object_queries.ObjectQueries |  model : \l| create(self, session: Session, obj_type: str, os: str, status: str) : \l }"];
"database.queries_files.port_queries.PortQueries"             [shape = record, label = "{ database.queries_files.port_queries.PortQueries |  ip : \l  model : \l| __init__(self, ip: IPQueries, session_maker: Session) : \l  create(self, session: Session, ip: str, port: int, mac: str=None, service: str=None, product: str=None,
                         extra_info: str=None, version: str=None, os_type: str=None, cpe: str=None, state: str=None, **kwargs) : \l  get_ports_by_ip(self, session: Session, ip_id: int) : \l }"];
"database.queries_files.screenshot_queries.ScreenshotQueries" [shape = record, label = "{ database.queries_files.screenshot_queries.ScreenshotQueries |  task : \l  port : \l  model : \l| __init__(self, task: TaskQueries, port: PortQueries, session_maker: Session) : \l  create(self, session: Session, path: str, task_id: int, ip: str=None, port: int=None, domain: str=None) : \l }"];
"database.queries_files.task_queries.TaskQueries"             [shape = record, label = "{ database.queries_files.task_queries.TaskQueries |  model : \l| create(self, session: Session, status: str, params: dict) : \l  set_pending_status(self, session: Session, index: int) : \l  set_finished_status(self, session: Session, index: int) : \l  set_failed_status(self, session: Session, index: int, error_message: str) : \l  get_last_finished_tasks(self, session: Session, interval: int) : \l  get_not_finished_tasks(self, session: Session) : \l }"];
"exceptions.loggers.LoggerNames"                              [shape = record, label = "{ exceptions.loggers.LoggerNames |  main : \l  gui : \l  db : \l  scan : \l  screenshoter : \l  task : \l }"];
"exceptions.screenshoter_exceptions.ConnectionError"          [shape = record, label = "{ exceptions.screenshoter_exceptions.ConnectionError |  message : \l| __init__(self, url: str, message: str) : \l }"];
"exceptions.snanners_exceptions.NmapCommandError"             [shape = record, label = "{ exceptions.snanners_exceptions.NmapCommandError |  message : \l| __init__(self, message: str) : \l }"];
"exceptions.snanners_exceptions.NmapParserError"              [shape = record, label = "{ exceptions.snanners_exceptions.NmapParserError |  message : \l| __init__(self) : \l }"];
"exceptions.snanners_exceptions.NmapSaverError"               [shape = record, label = "{ exceptions.snanners_exceptions.NmapSaverError |  message : \l| __init__(self, filepath: str) : \l }"];
"modules.abstract_module.AbstractModule"                      [shape = record, label = "{ modules.abstract_module.AbstractModule |  execute_async(self, *args, **kwargs) : \l  execute(self, *args, **kwargs) : \l }"];
"modules.nmap.module.NmapModule"                              [shape = record, label = "{ modules.nmap.module.NmapModule |  parser : \l  scanner : \l| __init__(self) : \l  execute(self, iface: str) : \l  execute_async(self, iface: str) : \l }"];
"modules.nmap.parser.NmapParser"                              [shape = record, label = "{ modules.nmap.parser.NmapParser |  to_list(data: dict or list) : \l  parse_addresses(address: list or dict) : \l  parse_hostname(hostnames: list or dict) : \l  parse_traces(trace: list or dict, self_address: dict) : \l  parse_ports(ports: dict or list, address: dict) : \l  parse_hosts(self, scan: dict, self_address: dict) : \l }"];
"modules.nmap.parser.NmapStructure"                           [shape = record, label = "{ modules.nmap.parser.NmapStructure |  addresses : \l  traces : \l  hostnames : \l  ports : \l  __slots__ : \l| __init__(self) : \l }"];
"modules.nmap.scanner.NmapScanner"                            [shape = record, label = "{ modules.nmap.scanner.NmapScanner |  start_command : \l  superuser_permision : \l| run(self, extra_args: str, _password: str) : \l  async_run(self, extra_args: str, _password: str) : \l  parse_xml(input_xml: str) : \l  save_source_data(path: str, scan_xml: str, command: str) : \l }"];
"modules.project_manager.configs.Configs"                     [shape = record, label = "{ modules.project_manager.configs.Configs |  nmap_logs : \l  project_path : \l  database_file : \l  project_name : \l  scapy_logs : \l  __dict__ : \l  screenshots : \l  network_interface : \l| __init__(self, project_path: str, iface: str=None) : \l  __generate_configs(self) : \l  create_config_file(self, config_file_name: str=project_config_file_name) : \l  load_config_from_file(self) : \l  get_config_dict(self) : \l }"];
"modules.project_manager.files.FilesStructure"                [shape = record, label = "{ modules.project_manager.files.FilesStructure |  project_structure : \l| __init__(self, project_structure: dict) : \l  create_project_structure(self) : \l  check_project_structure(self) : \l  __create_file_in_project_folder(self, path: list) : \l  __create_folder_in_project_folder(self, path: list) : \l  __check_path_in_project_folder(self, path: list) : \l }"];
"modules.project_manager.manager.ProjectManager"              [shape = record, label = "{ modules.project_manager.manager.ProjectManager |  projects_path : \l| __init__(self) : \l  get_existing_projects_name(self) : \l  create_project(self, project_name: str, iface: str) : \l  delete_project(self, project_name: str) : \l  get_project_config(self, project_name: str) : \l }"];
"modules.scan.active_scan.arp_scanning.ARPScanner"            [shape = record, label = "{ modules.scan.active_scan.arp_scanning.ARPScanner |  __init__(self) : \l  snan_by_arp(self, pdst: str, dst_mac='ff:ff:ff:ff:ff:ff') : \l }"];
"modules.scan.active_scan.ip_range.IPv4Range"                 [shape = record, label = "{ modules.scan.active_scan.ip_range.IPv4Range |  split_range(source_range: str) : \l  to_list_by_netmask(ip_range: str) : \l  to_list_by_dash(ip_range: str) : \l  validate_range(ip_range: str) : \l }"];
"modules.screenshoter.screenshoter.Screenshoter"              [shape = record, label = "{ modules.screenshoter.screenshoter.Screenshoter |  chromium_path : \l  options : \l| __init__(self, chromium_path) : \l  take_screenshot_by_ip_port(self, ip: str, port: int, file_path: str, file_name: str,) : \l  take_screenshot_by_domain(self, domain: str, file_path: str, file_name: str,) : \l }"];
"modules.sniffing.arp_sniffer.ARPSniffer"                     [shape = record, label = "{ modules.sniffing.arp_sniffer.ARPSniffer |  __init__(self, iface: str) : \l  parse_packet(pkt: Packet) : \l  parse_packets_list(self, pkt_list: PacketList) : \l  is_packet_type(pkt: Packet) : \l }"];
"modules.sniffing.base_sniffer.Sniffer"                       [shape = record, label = "{ modules.sniffing.base_sniffer.Sniffer |  iface : \l  sniffer : \l  logger : \l| __init__(self, iface: str, **kwargs) : \l  execute(self, timeout: float) : \l  execute_async(self, timeout: float) : \l  start_sniffing(self) : \l  stop_sniffing(self) : \l  parse_packets_list(self, pkt_list: PacketList) : \l  _parse_packet_list(self, pkt_list: PacketList) : \l  read_pcap(path: str) : \l  save_sniffing_as_pcap(self, path: str, pkt_list: PacketList, append: bool=True) : \l  is_packet_type(pkt: Packet) : \l  parse_packet(self, pkt: Packet) : \l }"];
"modules.sniffing.llmnr_sniffer.LLMNRSniffer"                 [shape = record, label = "{ modules.sniffing.llmnr_sniffer.LLMNRSniffer |  __init__(self, iface: str) : \l  parse_packet(pkt: Packet) : \l  parse_packets_list(self, pkt_list: PacketList) : \l  is_packet_type(pkt: Packet) : \l }"];
"modules.sniffing.netbios_sniffer.NetBOISSniffer"             [shape = record, label = "{ modules.sniffing.netbios_sniffer.NetBOISSniffer |  __init__(self, iface: str) : \l  parse_packet(pkt: Packet) : \l  parse_packets_list(self, pkt_list: PacketList) : \l  is_packet_type(pkt: Packet) : \l }"];
"modules.sniffing.tcp_sniffer.TCPSniffer"                     [shape = record, label = "{ modules.sniffing.tcp_sniffer.TCPSniffer |  __init__(self, iface: str) : \l  parse_packet(pkt: Packet) : \l  parse_packets_list(self, pkt_list: PacketList) : \l  is_packet_type(pkt: Packet) : \l }"];
"routes.api.base_web_view.BaseView"                           [shape = record, label = "{ routes.api.base_web_view.BaseView |  endpoint : \l  queries_path : \l| __init__(self, path: str) : \l  route(method, path) : \l  create_from_table(self, request: Request) : \l  create(self, request: Request) : \l  delete_by_id(self, request: Request) : \l  update(self, request: Request) : \l  update_from_table(self, request: Request) : \l  get_all(self, request: Request) : \l  get_db_queries(self, request: Request) : \l }"];
"routes.api.ip.IPView"                                        [shape = record, label = "{ routes.api.ip.IPView |  endpoint : \l  queries_path : \l }"];
"routes.api.l3link.L3LinkView"                                [shape = record, label = "{ routes.api.l3link.L3LinkView |  endpoint : \l  queries_path : \l| get_nodes_and_edges(self, request: Request) : \l }"];
"routes.api.mac.MACView"                                      [shape = record, label = "{ routes.api.mac.MACView |  endpoint : \l  queries_path : \l }"];
"routes.api.object.ObjectView"                                [shape = record, label = "{ routes.api.object.ObjectView |  endpoint : \l  queries_path : \l }"];
"routes.api.port.PortView"                                    [shape = record, label = "{ routes.api.port.PortView |  endpoint : \l  queries_path : \l| get_port_by_ip(self, request: Request) : \l  get_port_like_ip(self, request: Request) : \l }"];
"routes.api.project.ProjectView"                              [shape = record, label = "{ routes.api.project.ProjectView |  endpoint : \l  queries_path : \l| create_from_table(self, request: Request) : \l  create(self, request: Request) : \l  delete_by_id(self, request: Request) : \l  update(self, request: Request) : \l  get_all(self, request: Request) : \l  set_project(self, request: Request) : \l  set_project_data_to_session(self, session: Session, project_name: str, app: Application) : \l }"];
"routes.api.screenshot.ScreenshotView"                        [shape = record, label = "{ routes.api.screenshot.ScreenshotView |  endpoint : \l  queries_path : \l }"];
"routes.api.task.TaskView"                                    [shape = record, label = "{ routes.api.task.TaskView |  endpoint : \l  queries_path : \l  tasks : \l| create(self, request: Request) : \l  get_all(self, request: Request) : \l  get_last_finished(self, request: Request) : \l }"];
"tasks.base_task.BaseTask"                                    [shape = record, label = "{ tasks.base_task.BaseTask |  _task_func(self, *args, **kwargs) : \l  _write_result_to_db(self, *args, **kwargs) : \l  execute(self, db: Queries, task_id: int, *args, **kwargs) : \l }"];
"tasks.nmap_logs_task.NmapLogTask"                            [shape = record, label = "{ tasks.nmap_logs_task.NmapLogTask |  _task_func(self, xml_log: str, **kwargs) : \l }"];
"tasks.nmap_scan_task.NmapScanTask"                           [shape = record, label = "{ tasks.nmap_scan_task.NmapScanTask |  _task_func(self, command: str, _password: str, **kwargs) : \l  _write_result_to_db(self, db: Queries, result: list, iface:str, **kwargs) : \l }"];
"tasks.scapy_scan_task.ScapyScanTask"                         [shape = record, label = "{ tasks.scapy_scan_task.ScapyScanTask |  task_type : \l| _task_func(iface: str, timeout: float) : \l  _write_result_to_db(self, db: Queries, result: list, iface: str, *args, **kwargs) : \l }"];
"tasks.screenshot_task.ScreenshotTask"                        [shape = record, label = "{ tasks.screenshot_task.ScreenshotTask |  task_type : \l| _task_func(ip: str, port: int, file_path: str, file_name: str, with_params: bool) : \l  _write_result_to_db(self, db: Queries, task_id: int, params: dict, *args, **kwargs) : \l }"];
"tasks.task_status.TaskStatus"                                [shape = record, label = "{ tasks.task_status.TaskStatus |  pending : \l  in_queue : \l  finished : \l  failed : \l }"];
"tools.timer.RepeatTimer"                                     [shape = record, label = "{ tools.timer.RepeatTimer |  name : \l  instances : \l| __init__(self, name, *args, **kwargs) : \l  run(self) : \l  cancel_timer_by_name(cls, name: str) : \l }"];

"database.models.IP"                                          -> Base                                                          [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.IP"                                          -> "database.models.BaseModel"                                   [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.L3Link"                                      -> Base                                                          [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.L3Link"                                      -> "database.models.BaseModel"                                   [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.MAC"                                         -> Base                                                          [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.MAC"                                         -> "database.models.BaseModel"                                   [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Object"                                      -> Base                                                          [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Object"                                      -> "database.models.BaseModel"                                   [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Port"                                        -> Base                                                          [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Port"                                        -> "database.models.BaseModel"                                   [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Screenshot"                                  -> Base                                                          [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Screenshot"                                  -> "database.models.BaseModel"                                   [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Task"                                        -> Base                                                          [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.models.Task"                                        -> "database.models.BaseModel"                                   [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.base_queries.BaseQueries"             -> ABC                                                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.ip_queries.IPQueries"                 -> "database.queries_files.base_queries.BaseQueries"             [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.l3link_queries.L3LinkQueries"         -> "database.queries_files.base_queries.BaseQueries"             [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.mac_queries.MACQueries"               -> "database.queries_files.base_queries.BaseQueries"             [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.object_queries.ObjectQueries"         -> "database.queries_files.base_queries.BaseQueries"             [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.port_queries.PortQueries"             -> "database.queries_files.base_queries.BaseQueries"             [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.screenshot_queries.ScreenshotQueries" -> "database.queries_files.base_queries.BaseQueries"             [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"database.queries_files.task_queries.TaskQueries"             -> "database.queries_files.base_queries.BaseQueries"             [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"exceptions.screenshoter_exceptions.ConnectionError"          -> Exception                                                     [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"exceptions.snanners_exceptions.NmapCommandError"             -> Exception                                                     [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"exceptions.snanners_exceptions.NmapParserError"              -> Exception                                                     [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"exceptions.snanners_exceptions.NmapSaverError"               -> Exception                                                     [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"modules.abstract_module.AbstractModule"                      -> ABC                                                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"modules.nmap.module.NmapModule"                              -> "modules.abstract_module.AbstractModule"                      [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"modules.sniffing.arp_sniffer.ARPSniffer"                     -> "modules.sniffing.base_sniffer.Sniffer"                       [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"modules.sniffing.base_sniffer.Sniffer"                       -> "modules.abstract_module.AbstractModule"                      [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"modules.sniffing.llmnr_sniffer.LLMNRSniffer"                 -> "modules.sniffing.base_sniffer.Sniffer"                       [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"modules.sniffing.netbios_sniffer.NetBOISSniffer"             -> "modules.sniffing.base_sniffer.Sniffer"                       [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"modules.sniffing.tcp_sniffer.TCPSniffer"                     -> "modules.sniffing.base_sniffer.Sniffer"                       [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.base_web_view.BaseView"                           -> ABC                                                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.ip.IPView"                                        -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.l3link.L3LinkView"                                -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.mac.MACView"                                      -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.object.ObjectView"                                -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.port.PortView"                                    -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.project.ProjectView"                              -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.screenshot.ScreenshotView"                        -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"routes.api.task.TaskView"                                    -> "routes.api.base_web_view.BaseView"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"tasks.base_task.BaseTask"                                    -> ABC                                                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"tasks.nmap_logs_task.NmapLogTask"                            -> "tasks.nmap_scan_task.NmapScanTask"                           [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"tasks.nmap_scan_task.NmapScanTask"                           -> "tasks.base_task.BaseTask"                                    [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"tasks.scapy_scan_task.ScapyScanTask"                         -> "tasks.base_task.BaseTask"                                    [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"tasks.screenshot_task.ScreenshotTask"                        -> "tasks.base_task.BaseTask"                                    [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];
"tools.timer.RepeatTimer"                                     -> Timer                                                         [color = "#595959", style = solid , arrowtail = normal  , arrowhead = none    , taillabel = "", label = "", headlabel = ""];

}
